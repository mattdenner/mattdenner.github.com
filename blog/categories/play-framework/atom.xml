<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Play framework | Words, code, skates]]></title>
  <link href="http://mattdenner.github.com//blog/categories/play-framework/atom.xml" rel="self"/>
  <link href="http://mattdenner.github.com//"/>
  <updated>2012-03-18T17:12:12+00:00</updated>
  <id>http://mattdenner.github.com//</id>
  <author>
    <name><![CDATA[Matthew Denner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Play framework 2.0 (part 1)]]></title>
    <link href="http://mattdenner.github.com//blog/2012/03/18/play-framework-2-dot-0-part-1/"/>
    <updated>2012-03-18T16:25:00+00:00</updated>
    <id>http://mattdenner.github.com//blog/2012/03/18/play-framework-2-dot-0-part-1</id>
    <content type="html"><![CDATA[<p>I'm just starting out learning <a href="http://scala-lang.org/">Scala</a> and the <a href="http://playframework.org/">Play 2.0 framework</a> and the experience isn't half of what I got from learning
Ruby and Ruby-on-Rails.  I think that this is, in part, due to the lack of decent tutorials for the Play 2.0 framework, which I appreciate is new, and the frustration that
comes from not being able to find information.  So, I hope that the next few posts will document my journey and help you on yours.</p>

<!--more-->


<p>I'm going to leave installing Scala and the Play 2.0 framework to you, but the quick instructions, for those of you on Mac OS X with <a href="http://mxcl.github.com/homebrew/">homebrew</a>
installed and running zsh, is:</p>

<p><code>console
$ brew install scala
$ mkdir messing_with_play
$ cd messing_with_play
$ wget http://download.playframework.org/releases/play-2.0.zip
$ unzip play-2.0.zip
$ path+=(`pwd`/play-2.0)
</code></p>

<p>Once installed you can create a new application with:</p>

<p>```console
$ play new my_first_application</p>

<pre><code>   _            _
</code></pre>

<p> _ <strong> | | </strong> _ _  <em>| |
| '</em> \| |/ <em>' | || |</em>|
|  <strong>/|<em>|_</em></strong>|_<em> (</em>)
|_|            |__/</p>

<p>play! 2.0, http://www.playframework.org</p>

<p>The new application will be created in /Users/matt/messing_with_play/my_first_application</p>

<p>What is the application name?</p>

<blockquote><p>my_first_application</p></blockquote>

<p>Which template do you want to use for this new application?</p>

<p>  1 - Create a simple Scala application
  2 - Create a simple Java application
  3 - Create an empty project</p>

<blockquote><p>1</p></blockquote>

<p>OK, application my_first_application is created.</p>

<p>Have fun!
$ cd my_first_application
```</p>

<p>From what I've seen the next thing to do is to run the application and point a browser at it, but we're going to take a slightly longer path and start the console:</p>

<p>```console
$ play
[info] Loading project definition from /Users/matt/messing_with_play/my_first_application/project
[info] Set current project to my_first_application (in build file:/Users/matt/messing_with_play/my_first_application/)</p>

<pre><code>   _            _
</code></pre>

<p> _ <strong> | | </strong> _ _  <em>| |
| '</em> \| |/ <em>' | || |</em>|
|  <strong>/|<em>|_</em></strong>|_<em> (</em>)
|_|            |__/</p>

<p>play! 2.0, http://www.playframework.org</p>

<blockquote><p>Type "help play" or "license" for more information.
Type "exit" or use Ctrl+D to leave this console.</p></blockquote>

<p>[my_first_application] $
```</p>

<p>Anyway, this is the Play console.  From it you can do several things but we're going to begin by starting the server, testing it with our browser, and then stopping the running
application:</p>

<p>```console
[my_first_application] $ run</p>

<p>[info] Updating {file:/Users/matt/messing_with_play/my_first_application/}my_first_application...
[info] Done updating.
--- (Running the application from SBT, auto-reloading is enabled) ---</p>

<p>[info] play - Listening for HTTP on port 9000...</p>

<p>(Server started, use Ctrl+D to stop and go back to the console...)
```</p>

<p>The first time you run your application it may take a while whilst the framework checks your dependencies.  After it's started the server you should be able to point your
browser at <a href="http://localhost:9000/">http://localhost:9000/</a> and should see a nice looking set of pages.  Feel free to wander around!  You may notice that the first request
causes the following output in the console:</p>

<p><code>console
[info] Compiling 5 Scala sources and 1 Java source to /Users/matt/messing_with_play/my_first_application/target/scala-2.9.1/classes...
[info] play - Application started (Dev)
</code></p>

<p>You should note that every time you change a source file the framework will recompile it and load the resulting code.  This is great, giving the quick feedback that is so
productive with Rails, but I've found it somewhat easier to do a compile myself when working on code.  That is not to say that automatic recompilation isn't handy, it's just
that I've been learning Scala at the same time, so I tend to make more source code errors than I do application logic errors, if that makes any sense.</p>

<p>To compile the code we need to stop the server, so press <code>CTRL</code> and <code>D</code>.  Then do the following:</p>

<p><code>console
[my_first_application] $ compile
[success] Total time: 0 s, completed Mar 18, 2012 4:57:37 PM
</code></p>

<p>This tells me there are no compilation errors, so I could <code>run</code> the application and try the browser again.  I'd certainly do this if I had changed code, and it had compiled
successfully, just to make sure I hadn't broken the application itself.</p>

<p>There's something important to note here:</p>

<p>You've probably noticed that you can access the framework documentation from your new application by going to <a href="http://localhost:9000/@documentation">http://localhost:9000/@documentation</a>
(remember to <code>run</code> your application first!).  <strong><em>Thing is, if your code won't compile you can't <code>run</code> your application, so you can't access the documentation, which means you
might not be able to work out what to do to fix the problem!</em></strong></p>

<p>So, my advice: keep <a href="http://www.playframework.org/documentation/api/2.0/scala/index.html#package">the online API documentation</a> handy!</p>

<p>Think I'll leave it there.  You can find out more about the Play console by typing <code>help</code>, although I've not used anything else for the moment.  Next time I'll go into the
structure of the application and hooking up a database.</p>
]]></content>
  </entry>
  
</feed>
