<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Words, code, skates]]></title>
  <link href="http://mattdenner.github.com//atom.xml" rel="self"/>
  <link href="http://mattdenner.github.com//"/>
  <updated>2012-03-18T17:12:12+00:00</updated>
  <id>http://mattdenner.github.com//</id>
  <author>
    <name><![CDATA[Matthew Denner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Play framework 2.0 (part 1)]]></title>
    <link href="http://mattdenner.github.com//blog/2012/03/18/play-framework-2-dot-0-part-1/"/>
    <updated>2012-03-18T16:25:00+00:00</updated>
    <id>http://mattdenner.github.com//blog/2012/03/18/play-framework-2-dot-0-part-1</id>
    <content type="html"><![CDATA[<p>I&#8217;m just starting out learning <a href="http://scala-lang.org/">Scala</a> and the <a href="http://playframework.org/">Play 2.0 framework</a> and the experience isn&#8217;t half of what I got from learning
Ruby and Ruby-on-Rails.  I think that this is, in part, due to the lack of decent tutorials for the Play 2.0 framework, which I appreciate is new, and the frustration that
comes from not being able to find information.  So, I hope that the next few posts will document my journey and help you on yours.</p>

<!--more-->


<p>I&#8217;m going to leave installing Scala and the Play 2.0 framework to you, but the quick instructions, for those of you on Mac OS X with <a href="http://mxcl.github.com/homebrew/">homebrew</a>
installed and running zsh, is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> brew install scala
</span><span class='line'><span class="gp">$</span> mkdir messing_with_play
</span><span class='line'><span class="gp">$</span> <span class="nb">cd </span>messing_with_play
</span><span class='line'><span class="gp">$</span> wget http://download.playframework.org/releases/play-2.0.zip
</span><span class='line'><span class="gp">$</span> unzip play-2.0.zip
</span><span class='line'><span class="gp">$</span> path+<span class="o">=(</span><span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>/play-2.0<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once installed you can create a new application with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> play new my_first_application
</span><span class='line'><span class="go">       _            _</span>
</span><span class='line'><span class="go"> _ __ | | __ _ _  _| |</span>
</span><span class='line'><span class="go">| &#39;_ \| |/ _&#39; | || |_|</span>
</span><span class='line'><span class="go">|  __/|_|\____|\__ (_)</span>
</span><span class='line'><span class="go">|_|            |__/</span>
</span><span class='line'>
</span><span class='line'><span class="go">play! 2.0, http://www.playframework.org</span>
</span><span class='line'>
</span><span class='line'><span class="go">The new application will be created in /Users/matt/messing_with_play/my_first_application</span>
</span><span class='line'>
</span><span class='line'><span class="go">What is the application name?</span>
</span><span class='line'><span class="gp">&gt;</span> my_first_application
</span><span class='line'>
</span><span class='line'><span class="go">Which template do you want to use for this new application?</span>
</span><span class='line'>
</span><span class='line'><span class="go">  1 - Create a simple Scala application</span>
</span><span class='line'><span class="go">  2 - Create a simple Java application</span>
</span><span class='line'><span class="go">  3 - Create an empty project</span>
</span><span class='line'>
</span><span class='line'><span class="gp">&gt;</span> 1
</span><span class='line'>
</span><span class='line'><span class="go">OK, application my_first_application is created.</span>
</span><span class='line'>
</span><span class='line'><span class="go">Have fun!</span>
</span><span class='line'><span class="gp">$</span> <span class="nb">cd </span>my_first_application
</span></code></pre></td></tr></table></div></figure>


<p>From what I&#8217;ve seen the next thing to do is to run the application and point a browser at it, but we&#8217;re going to take a slightly longer path and start the console:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> play
</span><span class='line'><span class="go">[info] Loading project definition from /Users/matt/messing_with_play/my_first_application/project</span>
</span><span class='line'><span class="go">[info] Set current project to my_first_application (in build file:/Users/matt/messing_with_play/my_first_application/)</span>
</span><span class='line'><span class="go">       _            _</span>
</span><span class='line'><span class="go"> _ __ | | __ _ _  _| |</span>
</span><span class='line'><span class="go">| &#39;_ \| |/ _&#39; | || |_|</span>
</span><span class='line'><span class="go">|  __/|_|\____|\__ (_)</span>
</span><span class='line'><span class="go">|_|            |__/</span>
</span><span class='line'>
</span><span class='line'><span class="go">play! 2.0, http://www.playframework.org</span>
</span><span class='line'>
</span><span class='line'><span class="gp">&gt;</span> Type <span class="s2">&quot;help play&quot;</span> or <span class="s2">&quot;license&quot;</span> <span class="k">for </span>more information.
</span><span class='line'><span class="gp">&gt;</span> Type <span class="s2">&quot;exit&quot;</span> or use Ctrl+D to leave this console.
</span><span class='line'>
</span><span class='line'><span class="go">[my_first_application] $</span>
</span></code></pre></td></tr></table></div></figure>


<p>Anyway, this is the Play console.  From it you can do several things but we&#8217;re going to begin by starting the server, testing it with our browser, and then stopping the running
application:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">[my_first_application] $ run</span>
</span><span class='line'>
</span><span class='line'><span class="go">[info] Updating {file:/Users/matt/messing_with_play/my_first_application/}my_first_application...</span>
</span><span class='line'><span class="go">[info] Done updating.</span>
</span><span class='line'><span class="go">--- (Running the application from SBT, auto-reloading is enabled) ---</span>
</span><span class='line'>
</span><span class='line'><span class="go">[info] play - Listening for HTTP on port 9000...</span>
</span><span class='line'>
</span><span class='line'><span class="go">(Server started, use Ctrl+D to stop and go back to the console...)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first time you run your application it may take a while whilst the framework checks your dependencies.  After it&#8217;s started the server you should be able to point your
browser at <a href="http://localhost:9000/">http://localhost:9000/</a> and should see a nice looking set of pages.  Feel free to wander around!  You may notice that the first request
causes the following output in the console:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">[info] Compiling 5 Scala sources and 1 Java source to /Users/matt/messing_with_play/my_first_application/target/scala-2.9.1/classes...</span>
</span><span class='line'><span class="go">[info] play - Application started (Dev)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You should note that every time you change a source file the framework will recompile it and load the resulting code.  This is great, giving the quick feedback that is so
productive with Rails, but I&#8217;ve found it somewhat easier to do a compile myself when working on code.  That is not to say that automatic recompilation isn&#8217;t handy, it&#8217;s just
that I&#8217;ve been learning Scala at the same time, so I tend to make more source code errors than I do application logic errors, if that makes any sense.</p>

<p>To compile the code we need to stop the server, so press <code>CTRL</code> and <code>D</code>.  Then do the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">[my_first_application] $ compile</span>
</span><span class='line'><span class="go">[success] Total time: 0 s, completed Mar 18, 2012 4:57:37 PM</span>
</span></code></pre></td></tr></table></div></figure>


<p>This tells me there are no compilation errors, so I could <code>run</code> the application and try the browser again.  I&#8217;d certainly do this if I had changed code, and it had compiled
successfully, just to make sure I hadn&#8217;t broken the application itself.</p>

<p>There&#8217;s something important to note here:</p>

<p>You&#8217;ve probably noticed that you can access the framework documentation from your new application by going to <a href="http://localhost:9000/@documentation">http://localhost:9000/@documentation</a>
(remember to <code>run</code> your application first!).  <strong><em>Thing is, if your code won&#8217;t compile you can&#8217;t <code>run</code> your application, so you can&#8217;t access the documentation, which means you
might not be able to work out what to do to fix the problem!</em></strong></p>

<p>So, my advice: keep <a href="http://www.playframework.org/documentation/api/2.0/scala/index.html#package">the online API documentation</a> handy!</p>

<p>Think I&#8217;ll leave it there.  You can find out more about the Play console by typing <code>help</code>, although I&#8217;ve not used anything else for the moment.  Next time I&#8217;ll go into the
structure of the application and hooking up a database.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Things I've learned this week]]></title>
    <link href="http://mattdenner.github.com//blog/2012/03/18/things-ive-learned-this-week/"/>
    <updated>2012-03-18T11:26:00+00:00</updated>
    <id>http://mattdenner.github.com//blog/2012/03/18/things-ive-learned-this-week</id>
    <content type="html"><![CDATA[<p>What I&#8217;ve learned this week:</p>

<ul>
<li>I have no free time because I work too much</li>
<li><a href="http://tmux.sourceforge.net/">tmux</a> and <a href="http://vim.org/">vim</a> are a powerful combination</li>
<li><a href="http://scala-lang.org/">Scala</a> is hard to write after working in Ruby for so long</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2011: in review]]></title>
    <link href="http://mattdenner.github.com//blog/2011/12/31/2011-in-review/"/>
    <updated>2011-12-31T07:53:00+00:00</updated>
    <id>http://mattdenner.github.com//blog/2011/12/31/2011-in-review</id>
    <content type="html"><![CDATA[<p>It would be remiss of me not to do a look back over 2011 and to gaze into the future of 2012, seeing as that&#8217;s what people are supposed to do at this
time of year.</p>

<!--more-->


<p>This hasn&#8217;t been my greatest year so far, and I certainly won&#8217;t miss it when it&#8217;s gone tomorrow:</p>

<p>Emotionally it&#8217;s been awful: at the beginning of the year the friendship between my ex-girlfriend and myself became strained and I decided to take a
few months to think about what to do about it.  I ended up in New York for a week trying to sort myself out, which worked out far better than I
expected.  A few weeks after I returned to the UK, in which I gave myself time to be sure that what I&#8217;d decided was the right thing to do, I contacted
her about trying to work things out.  Unfortunately I don&#8217;t feel she saw things the same way, ignoring my attempts to make peace, so in the middle of
the year I decided it was better to not see each other again.</p>

<p>It&#8217;s one of the hardest things I&#8217;ve had to do, especially considering I wanted to spend the rest of my life with her, but when there&#8217;s an imbalance in
any relationship that causes a detriment to your mental health it is better to walk away.  I still think about her, not as much as I used to, and I
wish things had turned out different, but I do not regret my decision in the slightest (ok, the Christmas card from her parents made me feel like a
shit).</p>

<p>The stress at work has been a bit of a rollercoaster over the year: the year started with a promotion, and then another around July, followed by a
hefty piece of work that racked up several weeks of long hours.  But it&#8217;s the end of the year, the last couple of months, that have really pushed me.
The internal piece of software we develop is to be rewritten, from scratch, as the old codebase has become too unwieldy and unmaintainable; as
principle of the team it&#8217;s my responsibility to design, propose, and follow through with a better architecture, which is hard given the responses.
Where I expected the team to be supportive and positive about the situation, given that only a few months ago our jobs were essentially on-the-line, I
was met with disdain and negativity; I thought that people external to the team would fight me at every turn but, instead, they gave positive and
constructive feedback.</p>

<p>The truth is that some in the team have entered the negative mentality associated with a project-death-spiral, and don&#8217;t appear to be able to do
anything about it.  I admit, and anyone who follows me on Twitter will know, that I complain about the state of our code; but given this opportunity
to put some things right, without having to deal with the awful code we have, I relish the chance.  To stand in a room giving a presentation on
the proposed architecture, only to be criticised and not receive any thanks, was demoralising: given I lost ten days worth of holiday to do this
I feel like those people who think it&#8217;s crap, or won&#8217;t work, owe me some of theirs.</p>

<p>Out of these bad things that have been happening I have discovered several things: I&#8217;ve made a couple of good friends over this period, and
that I can count on a friend I&#8217;ve known for the last few years; I&#8217;ve become more sure of my technical self having read and watched stuff on the
internet; and I know that, no matter how dark it can get, there is always something to look forward to.</p>

<p>What does 2012 hold for me?</p>

<p>The rewrite at work is going to be a challenge but I firmly believe it will work out and we&#8217;ll be better off, provided we can ditch all of the
negativity and focus on the opportunity.</p>

<p>I&#8217;m going to put aside an hour a day where I just do something for myself: given I want to learn Mandarin, and haven&#8217;t been able to find time to do so,
I&#8217;m going to return to that this coming year.  I&#8217;ve already learned <span xml:lang="zh" lang="zh">这需要时间</span>: &#8220;It takes time&#8221;.</p>

<p>With the Olympics arriving in town this summer I guess I&#8217;m going to be heading into London quite a bit over the summer.  I haven&#8217;t got tickets but just
to be around the event will be interesting, and I&#8217;m sure there will be a lot happening.  I completely expect a couple of themed street skates!</p>

<p>And I&#8217;m already looking into heading back to New York and debating a trip to the west coast towards the end of the year.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disagreement #2]]></title>
    <link href="http://mattdenner.github.com//blog/2011/11/23/disagreement-number-2/"/>
    <updated>2011-11-23T20:56:00+00:00</updated>
    <id>http://mattdenner.github.com//blog/2011/11/23/disagreement-number-2</id>
    <content type="html"><![CDATA[<p>Following on from <a href="http://mattdenner.github.com//blog/2011/11/22/disagreement--1/">my previous disagreement</a>, here&#8217;s the second one I&#8217;ve been having:</p>

<p>You should code to the language and the environment you are in.  That
means taking advantage of the features of the languages and the
frameworks that you use.</p>

<!-- more -->


<p>This all comes about because, at work, we are rewriting our main
product as it has become overburdened with issues that come about
because of the history of the codebase.  It&#8217;s been hacked about, forced
to do things it shouldn&#8217;t, and had some bad engineering decisions pushed
into it.</p>

<p>The biggest issue we have moving forward is that both the existing
system and the new one will have to run in parallel, and on the same
database, for a period.  The data we have isn&#8217;t in the best of states
and the schema itself needs some serious work to make it better, which
is not something that is possible in the timeframe we have to rewrite.</p>

<p>To allow us to place build better models on the existing schema we&#8217;re
going to have to do some serious work and I believe that we should take
advantage of some of the abilities of Ruby.  Where the existing system
has a large class hierarchy some areas we can flatten this and use the
singleton class to add behaviour to objects at runtime.</p>

<p>Let me try to put this in terms of an example:</p>

<p>Pretend that you&#8217;re making a cup of tea.  You have to transfer the water
in the kettle to a tea cup, then you have to pour the milk from the jug
to the tea cup.</p>

<p>In our existing system these transfers were seen as two different
classes of transfer, but the source and target were seen as containers.
In other words:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Container</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Kettle</span> <span class="o">&lt;</span> <span class="no">Container</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">class</span> <span class="nc">TeaCup</span> <span class="o">&lt;</span> <span class="no">Container</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Jug</span> <span class="o">&lt;</span> <span class="no">Container</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TransferType</span>
</span><span class='line'>  <span class="n">validates_presence_of</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:transfers</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Transfer</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:transfer_type</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:source</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s1">&#39;Container&#39;</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:target</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s1">&#39;Container&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">class</span> <span class="nc">KettleToTeaCup</span> <span class="o">&lt;</span> <span class="no">Transfer</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MilkJugToTeaCup</span> <span class="o">&lt;</span> <span class="no">Transfer</span> <span class="p">;</span> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>That is almost identical to the code we have.</p>

<p>The <code>TransferType</code> class is there to provide a description of the type
of transfer, for the UI mainly, but it plays an important part in what
I&#8217;m going to talk about.</p>

<p>This is wrong on so many levels but let&#8217;s start with the one I&#8217;m
bothered by the most, which is the fact that I can do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">KettleToTeaCup</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:source</span> <span class="o">=&gt;</span> <span class="no">TeaCup</span><span class="o">.</span><span class="n">new</span><span class="p">,</span> <span class="ss">:target</span> <span class="o">=&gt;</span> <span class="no">Jug</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes, I can say that I want to do a kettle-to-tea-cup transfer <strong>from</strong> a
tea cup <strong>to</strong> a jug!  It makes no sense.  And, believe me, people try.</p>

<p>In the new code I would like to avoid this but, more importantly, I
don&#8217;t see that the transfer needs to have its own class because we
already have the <code>TransferType</code> class which kind of does that.</p>

<p>What I&#8217;m trying to advocate is that we can inject behaviour, from the
transfer type, into a transfer.  In other words:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">TransferType</span>
</span><span class='line'>  <span class="n">validates_presence_of</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="n">serialize</span> <span class="ss">:behaviours</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:transfers</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">inject_behaviour_into</span><span class="p">(</span><span class="n">record</span><span class="p">)</span>
</span><span class='line'>    <span class="n">behaviours</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">module_name</span><span class="o">|</span>
</span><span class='line'>      <span class="n">record</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">module_name</span><span class="o">.</span><span class="n">constantize</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Transfer</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:transfer_type</span>
</span><span class='line'>  <span class="n">after_initialize</span> <span class="ss">:inject_transfer_behaviour</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">inject_transfer_behaviour</span>
</span><span class='line'>    <span class="n">request_type</span><span class="o">.</span><span class="n">inject_behaviour_into</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="kp">private</span> <span class="ss">:inject_transfer_behaviour</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now you&#8217;d write:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">TransferType</span><span class="o">.</span><span class="n">find_by_name</span><span class="p">(</span><span class="s1">&#39;Pour kettle into tea cup&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">transfers</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="ss">:source</span> <span class="o">=&gt;</span> <span class="no">Kettle</span><span class="o">.</span><span class="n">new</span><span class="p">,</span> <span class="ss">:target</span> <span class="o">=&gt;</span> <span class="no">TeaCup</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>How do the source and target relationships get setup?  By having a
couple of modules:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">KettleSource</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">extended</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>    <span class="n">base</span><span class="o">.</span><span class="n">singleton_class</span><span class="o">.</span><span class="n">belongs_to</span><span class="p">(</span><span class="ss">:source</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s1">&#39;Kettle&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">module</span> <span class="nn">TeaCupTarget</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">extended</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>    <span class="n">base</span><span class="o">.</span><span class="n">singleton_class</span><span class="o">.</span><span class="n">belongs_to</span><span class="p">(</span><span class="ss">:target</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s1">&#39;TeaCup&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then defining:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">TransferType</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span>
</span><span class='line'>  <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">&#39;Pour kettle into tea cup&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:behaviours</span> <span class="o">=&gt;</span> <span class="o">[</span> <span class="s1">&#39;KettleSource&#39;</span><span class="p">,</span> <span class="s1">&#39;TeaCupTarget&#39;</span> <span class="o">]</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>What use is that?  Well:</p>

<p>We&#8217;re guaranteeing that you can&#8217;t do the tea cup to jug transfer that I
demonstrated earlier because the associations are defined.  The real
advantage here is that we can get rid of the Container base class and put
tea cups in a tea_cups table, kettles in a kettles table, etc.  We have
a definitive relationship without having to resort to polymorpism.
Unfortunately we lose the ability to put in a foreign key relationship.</p>

<p>Also, the number of modules you require will aways be equal to, or
better than, the number of derived classes you would have to create.  At
3 types of &#8220;container&#8221; you have 6 modules (kettle as source, kettle as
target, tea cup as source, etc) but you&#8217;d have 9 classes (kettle-kettle,
kettle-tea cup, kettle-jug, tea cup-kettle, tea cup-tea cup, etc) in
order to get the same behaviours.  In other words, we are more flexible
with modules being injected.</p>

<p>I&#8217;ve over simplified the actual structure here.  In our existing
codebase someone has added a derived class that does not have a source
or target but references a &#8220;container&#8221; by abusing the source_id field,
and still calling it &#8220;source&#8221;.  In my suggested way we could do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">OneThing</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">extended</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>    <span class="n">base</span><span class="o">.</span><span class="n">singleton_class</span><span class="o">.</span><span class="n">belongs_to</span><span class="p">(</span><span class="ss">:tea_cup</span><span class="p">,</span> <span class="ss">:foreign_key</span> <span class="o">=&gt;</span> <span class="ss">:source_id</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s1">&#39;TeaCup&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">TransferType</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span>
</span><span class='line'>  <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">&#39;Do nothing with a teacup&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:behaviours</span> <span class="o">=&gt;</span> <span class="o">[</span> <span class="s1">&#39;OneThing&#39;</span> <span class="o">]</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Point being: if a transfer created through this type was passed to a
method that expected source or target to be defined on it the code would
blow up, not silently do something stupid.</p>

<p>The problem I face is that people who are used to a statically typed
language favour the hierarchy, even though Ruby does not enforce it.
Ruby is dynamic: as long as an object responds to a method why not call
it?  Why do we need to know that its a particular type?</p>

<p>These people do not see that this is actually a big plus.  This
technique (which is, in a way I&#8217;m guessing, <a href="http://en.wikipedia.org/wiki/Data,_context_and_interaction">DCI</a>)
would enable the new code to be far more flexible and far better
defined, even though it is based on the same data schema.</p>

<p>But, yet again, I have no reason that my suggestion is any better other
than my &#8220;gut&#8221;.  I&#8217;m going to suggest it, and I&#8217;ve written code to do
this as a prototype, but I have a suspicion it&#8217;ll be rejected.  I&#8217;m not
bothered that someone who&#8217;s going to be coding this (as I&#8217;m probably not
going to be far too busy to help out) chooses not to do it because they
don&#8217;t understand it, but I think it&#8217;ll only be refused because of the
classical statically typed mentality.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disagreement #1]]></title>
    <link href="http://mattdenner.github.com//blog/2011/11/22/disagreement--1/"/>
    <updated>2011-11-22T18:19:00+00:00</updated>
    <id>http://mattdenner.github.com//blog/2011/11/22/disagreement&#8211;1</id>
    <content type="html"><![CDATA[<p>Work has been a little stressful over the last few months, which is a
whole other blog post at some point, but during the course of this I&#8217;ve
had several disagreements with people that I&#8217;ve not been able to argue a
reason why either option is better.  I&#8217;ve had gut feelings but, without
being able to rely on the trusted &#8220;gut&#8221;, it&#8217;s hard to convince people
that your opinion is in any way as valid as theirs.</p>

<p>I think the ability to see others view points is something important,
especially in an environment such as software development, but when
those individuals have strong views, or a stubborn attachment to them,
then you appear weak them.  I personally don&#8217;t think of myself as weak,
in that respect, but it bothers me that I can&#8217;t convince people to even
consider my opinion in some cases, and that worries me that we, as a
team, will over look something.</p>

<!--more-->


<p>Here&#8217;s a case in point:</p>

<p>There are, to me, two camps of people in the object oriented world:
those that believe in a large forest of small trees, and those that want
one big tree.</p>

<p>In Ruby code, these two views look like this, in the typical scenario of
describing vehicles:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Vehicle</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Car</span> <span class="o">&lt;</span> <span class="no">Vehicle</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Bus</span> <span class="o">&lt;</span> <span class="no">Vehicle</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Lorry</span> <span class="o">&lt;</span> <span class="no">Vehicle</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Ferrari</span> <span class="o">&lt;</span> <span class="no">Car</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Delorian</span> <span class="o">&lt;</span> <span class="no">Car</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Scania</span> <span class="o">&lt;</span> <span class="no">Lorry</span> <span class="p">;</span> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And so on (please don&#8217;t point out that the names I&#8217;ve used are really
instances of a Manufacturer class, that&#8217;s not what I&#8217;m trying to show
here).  This is a big tree: everything is in one long hierarchy of
classes because, on some level, they all fit into that tree.</p>

<p>The other alternative is the large forest:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Car</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">module</span> <span class="nn">Bus</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">module</span> <span class="nn">Lorry</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Ferrari</span> <span class="p">;</span> <span class="kp">include</span> <span class="no">Car</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Delorian</span> <span class="p">;</span> <span class="kp">include</span> <span class="no">Car</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Scania</span> <span class="p">;</span> <span class="kp">include</span> <span class="no">Lorry</span> <span class="p">;</span> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The idea being that anything that includes Car shares that common car
behaviour (maybe the number of wheels are 4, maybe the license you need
to drive it is non-specific); as do those including Lorry.</p>

<p>What the latter say is that you cannot substitute an instance of Scania
for an instance of Ferrari: who would want to race a Scania lorry in an
F1 competition?  Yes, I know, in Ruby you can because you just require
the object to respond to certain methods, but that&#8217;s another argument I
have with people about using the language, not imposing some static type
view point on a dynamic language.</p>

<p>The problem is that, when I argue the case for a large forest those
people who believe in big trees put up a stronger, or more aggressive,
viewpoint.  In my experience, having worked with some extremely good
software engineers in varying languages, the better developers lean
towards the large forest because they see hierarchies as somewhat
brittle: the classic of adding Aeroplane to these two situations is
easier in the latter but people still try to push and shove it into
their single hierarchy, after all, a Vehicle has an engine, so does an
Aeroplane.</p>

<p>I&#8217;ve rarely come across good software engineers who blankly refuse to
even consider one view when they have the opposite, and it angers me
because I see both, I just prefer the latter in my gut.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Things I've Learned This Week]]></title>
    <link href="http://mattdenner.github.com//blog/2011/09/10/things-ive-learned-this-week/"/>
    <updated>2011-09-10T18:00:00+01:00</updated>
    <id>http://mattdenner.github.com//blog/2011/09/10/things-ive-learned-this-week</id>
    <content type="html"><![CDATA[<p>What I&#8217;ve learned this week:</p>

<ul>
<li><a href="http://literatureandlatte.com/">Scrivener</a> is an absolutely awesome writing tool</li>
<li>DevOps is all about small changes for big gains</li>
<li>People will always assume it&#8217;s <em>your</em> fault once they have lost faith</li>
<li>Subaru Imprezza&#8217;s are cheaper than I expected</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Things I've Learned This Week]]></title>
    <link href="http://mattdenner.github.com//blog/2011/09/04/things-ive-learned-this-week/"/>
    <updated>2011-09-04T15:00:00+01:00</updated>
    <id>http://mattdenner.github.com//blog/2011/09/04/things-ive-learned-this-week</id>
    <content type="html"><![CDATA[<p>What I&#8217;ve learned this week:</p>

<ul>
<li>Ignoring rumours about your future is hard</li>
<li>I suck at chess</li>
<li>Apple Keynote is way better than Microsoft PowerPoint</li>
<li><a href="http://neo4j.org/">Neo4j</a> is pretty cool</li>
<li>I appear to have missed about 2 seasons of <a href="http://www.imdb.com/title/tt0187636/">Farscape</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Things I've Learned This Week]]></title>
    <link href="http://mattdenner.github.com//blog/2011/08/26/things-ive-learned-this-week/"/>
    <updated>2011-08-26T20:30:00+01:00</updated>
    <id>http://mattdenner.github.com//blog/2011/08/26/things-ive-learned-this-week</id>
    <content type="html"><![CDATA[<p>What I&#8217;ve learned this week:</p>

<ul>
<li><a href="http://vibram.com/">Vibram</a> make the weirdest shoes, but damn they&#8217;re comfy!</li>
<li>Javascript is far more powerful than I gave it credit for</li>
<li>IT hasn&#8217;t changed: it&#8217;s still about the money</li>
<li>If you can&#8217;t laugh at life it&#8217;s going to see a lot longer</li>
<li><a href="http://www.youtube.com/watch?v=4rGVSBTAVHM">Ginger Tea</a>, with lemon, really helps with colds</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Things I've Learned This Week]]></title>
    <link href="http://mattdenner.github.com//blog/2011/08/19/things-ive-learned-this-week/"/>
    <updated>2011-08-19T20:34:00+01:00</updated>
    <id>http://mattdenner.github.com//blog/2011/08/19/things-ive-learned-this-week</id>
    <content type="html"><![CDATA[<p>I thought it might be fun to keep track of things I&#8217;ve learned every
week:</p>

<ul>
<li>Ask &#8220;Where is the data?&#8221; not &#8220;Do we have the data?&#8221;</li>
<li><a href="http://bit.ly/qADEUv">Dr Who is ideal for graph databases</a></li>
<li>People will bitch about the performance of Ruby just to get a rise out of you</li>
<li>There is absolutely no way on Earth I&#8217;d ever watch Twilight (I won&#8217;t even link to it)</li>
<li><a href="http://chzb.gr/nIH6GW">Mandarin Chinese comes from techies</a> (and DBAs have far too much time on their hands)</li>
<li>It&#8217;s important to take time to play</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[node.js &amp; Mongo]]></title>
    <link href="http://mattdenner.github.com//blog/2011/08/19/node-js-and-mongo/"/>
    <updated>2011-08-19T14:57:00+01:00</updated>
    <id>http://mattdenner.github.com//blog/2011/08/19/node-js-and-mongo</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been wanting to try <a href="http://nodejs.org/">node.js</a> for a while and,
given <a href="http://whyday.org/">today was Whyday</a>, I thought I&#8217;d give it,
and <a href="http://mongodb.org/">MongoDB</a>, a go.  Turns out it hasn&#8217;t been the most
pleasant experience I&#8217;ve had.</p>

<p><strong>TR;DR</strong>: MongoDB just worked; asynchronous code looks crap; callbacks
should be objects, not functions; and documentation could be better.</p>

<!--more-->


<p>Installing node.js and MongoDB on Mac OS X is simple if you&#8217;re using
<a href="http://bit.ly/qVJZ9S">homebrew</a>, and getting a project and it&#8217;s
dependencies setup with <a href="http://npmjs.org/">npm</a> is relatively
straight forward.</p>

<p>It&#8217;s important to note that the problems I&#8217;m about to list are only
after a few hours of playing (and with constant interruptions from work
colleagues that I wanted to try to avoid), so they are only about getting
started with node.js and MongoDB.  All of these opinions might be proven
wrong over time, but they made my experience less gratifying.</p>

<p>Also, note that <strong>none</strong> of them related to MongoDB.  It just worked.
Admittedly I haven&#8217;t pushed it yet, but it was very easy to start
working with it.</p>

<p>My main problems have been:</p>

<h2>Asynchronous code looks like crap</h2>

<p>I&#8217;m sorry, but one important factor in my code writing is it looking
nice.  It sounds stupid to say this is important but well laid out code
is easier to read, which makes it easier to understand, IMO.</p>

<p>The problem is that asynchronous code looks fugly, very quickly.  Take a
simple example: open a connection to MongoDB, save a document, close the
connection.  Synchronous code could align these but asynchronous
automatically requires indentation:</p>

<figure class='code'><figcaption><span>asychronous-pseudo.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">driver</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">&#39;db&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">err</span> <span class="o">==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">record</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span> <span class="o">==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">driver</span><span class="p">.</span><span class="nx">close</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// This is 5 levels deep!</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>5 levels of indentation!</p>

<p>I know you can use functions, instead of the anonymous functions I&#8217;ve
used in the code above, but that&#8217;s something you learn over time, not
something I&#8217;ve seen being taught (or explained) from the start.  I guess
that&#8217;s part of the problem I have: that it&#8217;s incredibly hard to find any
form of best practices or style guide on code layout in node.js.  It&#8217;s
something I would expect to find on the node.js website itself, like a
style guide for keeping you from having to scroll your editor sideways
to read an entire line.</p>

<h2>Callbacks</h2>

<p>node.js has the philosophy that your callback will be a function, the
first argument of which could be an error.  Your callbacks then end up
with conditional logic in them based on the presence of this parameter,
which, to me, completely violates object oriented programming.  Rather
than writing:</p>

<figure class='code'><figcaption><span>node-callbacks.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">my_asynchronous_thing</span><span class="p">.</span><span class="nx">some_method</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">err</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Do something on error</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Do something on success</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>I would much rather see the callback as an object with <code>error</code> and
<code>success</code> functions:</p>

<figure class='code'><figcaption><span>object-callbacks.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">my_asynchronous_thing</span><span class="p">.</span><span class="nx">some_method</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">error</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error_object</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Do something on error</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Do something on success</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>It seems odd, to me, that something built in a properly object oriented
language wouldn&#8217;t take advantage of this.  I felt like I was back
writing C code!  Maybe I&#8217;m missing something?</p>

<h2>Documentation</h2>

<p>I picked <a href="http://mongoosejs.com/">Mongoose</a> as my interface to MongoDB
from node.js because it looked like it would offer a reasonable amount
of extras.  Coming from the <a href="htp://rubyonrails.org/">Rails</a> world I like
the idea of being able to specify validations on my database models, and
this is something that Mongoose provides.</p>

<p>My main problem with this module is that the documentation is lacking.
Yes, it <em>has</em> documentation, and lots of it by the looks of things.  The
problem is that it&#8217;s contradictory: at one point it says you can
validate strings with regular expressions using <code>validate</code>, then it&#8217;s
<code>match</code>.</p>

<p>Given that mismatch I started to lose trust in what I was writing, when
the validations weren&#8217;t being run, and faith in the documentation
itself.  So I dug around the code to find what I needed, but that isn&#8217;t
something I should have to do, or was very successful doing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[36 Years Down]]></title>
    <link href="http://mattdenner.github.com//blog/2011/08/11/36-years-down/"/>
    <updated>2011-08-11T19:16:00+01:00</updated>
    <id>http://mattdenner.github.com//blog/2011/08/11/36-years-down</id>
    <content type="html"><![CDATA[<p>So yesterday was my 36th birthday. A reflection of the last year is
something I need to do, even if you don&#8217;t want to read it!</p>

<!--more-->


<p>I don&#8217;t celebrate my birthday because, to me, it&#8217;s just another day but
recently it&#8217;s been more because it reminds me of my failings.  The past
year has been even more of a reminder and it&#8217;s something I want to
correct in the coming twelve months.</p>

<p>So, in no particular order here&#8217;s the past year:</p>

<ul>
<li>Started a job at <a href="http://sanger.ac.uk/">The Wellcome Trust Sanger Institute</a>
as a junior developer; got promoted to senior in January; promoted to
Principle in July.</li>
<li>Lost the most important relationship and one of my most trusted friends
because I&#8217;m not the person I should be.</li>
<li>Finally visited New York and had the best time, even though I was on
my own.</li>
<li>Skated, but not enough.</li>
<li>Made some new friends, which is unusual for me as I&#8217;m very protective
of myself.</li>
<li>Spent Christmas with the folks for the first time in years, then
promptly didn&#8217;t see them for 8 months.</li>
<li>Made myself quite ill for a few months.</li>
</ul>


<p>And for 2011 into 2012:</p>

<ul>
<li>Decided that Erlang and Haskell are the next programming languages for
me to learn, properly.</li>
<li>I&#8217;m going to make the team at the WTSI the best team at the WTSI.</li>
<li>Speaking and reading Mandarin, at least to a level where I feel I
could get by.</li>
<li>Go back to New York, because it was one of the best breaks I&#8217;ve had
and I want to do more there.</li>
<li>Present at a conference, preferably outside of the UK.</li>
<li>Skate more, and maybe abroad more often.</li>
</ul>

]]></content>
  </entry>
  
</feed>
